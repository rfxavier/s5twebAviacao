'------------------------------------------------------------------------------
' <auto-generated>
'     O código foi gerado por uma ferramenta.
'     Versão de Tempo de Execução:
'
'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
'     o código for gerado novamente.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports CodeFluent.Runtime
Imports CodeFluent.Runtime.Utilities

Namespace S5T
    
    'CodeFluent Entities generated (http://www.softfluent.com). Date: .
    <System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.01234.05678"),  _
     System.SerializableAttribute(),  _
     System.ComponentModel.DataObjectAttribute(),  _
     System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, pRODIZIO={pRODIZIO}, pId={pId}"),  _
     System.ComponentModel.TypeConverterAttribute(GetType(CodeFluent.Runtime.Design.NameTypeConverter))>  _
    Partial Public Class AviacaoViagemMov
        Implements System.ICloneable, System.IComparable, System.IComparable(Of S5T.AviacaoViagemMov), CodeFluent.Runtime.ICodeFluentCollectionEntity(Of Long), System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable(Of S5T.AviacaoViagemMov)
        
        Private _raisePropertyChangedEvents As Boolean = true
        
        Private _entityState As CodeFluent.Runtime.CodeFluentEntityState
        
        Private _pId As Long = -1
        
        Private _pDATA_SAIDA As Date = CodeFluentPersistence.DefaultDateTimeValue
        
        Private _pDATA_PREV_RETORNO As Date = CodeFluentPersistence.DefaultDateTimeValue
        
        Private _pDATA_RETORNO As Date = CodeFluentPersistence.DefaultDateTimeValue
        
        Private _oAviacaoLocalLinhapId As Long = -1
        
        <System.NonSerializedAttribute()>  _
        Private _oAviacaoLocalLinha As S5T.AviacaoLocalLinha = Nothing
        
        Private _oAviacaoMotoristapId As Long = -1
        
        <System.NonSerializedAttribute()>  _
        Private _oAviacaoMotorista As S5T.AviacaoMotorista = Nothing
        
        Private _oAviacaoCaminhaopId As Long = -1
        
        <System.NonSerializedAttribute()>  _
        Private _oAviacaoCaminhao As S5T.AviacaoCaminhao = Nothing
        
        Private _pRODIZIO As String = CType(Nothing, String)
        
        Private _pSTATUS As String = CType(Nothing, String)
        
        Private _oAviacaoLocalLinhaRetornopId As Long = -1
        
        <System.NonSerializedAttribute()>  _
        Private _oAviacaoLocalLinhaRetorno As S5T.AviacaoLocalLinha = Nothing
        
        <System.NonSerializedAttribute()>  _
        Private _oAviacaoLocalLinhas As S5T.AviacaoLocalLinhaCollection
        
        <System.NonSerializedAttribute()>  _
        Private _oAviacaoLocalLinhasRetorno As S5T.AviacaoLocalLinhaCollection
        
        Public Sub New()
            MyBase.New
            Me._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created
        End Sub
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Overridable Property RaisePropertyChangedEvents() As Boolean
            Get
                Return Me._raisePropertyChangedEvents
            End Get
            Set
                Me._raisePropertyChangedEvents = value
            End Set
        End Property
        
        Public Overridable Property EntityKey() As String Implements CodeFluent.Runtime.ICodeFluentEntity.EntityKey
            Get
                Return Me.pId.ToString
            End Get
            Set
                Me.pId = CType(ConvertUtilities.ChangeType(value, GetType(Long), -1),Long)
            End Set
        End Property
        
        Public Overridable ReadOnly Property EntityDisplayName() As String Implements CodeFluent.Runtime.ICodeFluentEntity.EntityDisplayName
            Get
                Return Me.pRODIZIO
            End Get
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(-1,Long)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Long)),  _
         System.ComponentModel.DataObjectFieldAttribute(true)>  _
        Public Property pId() As Long
            Get
                Return Me._pId
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of Long).Default.Equals(value, Me._pId) = true) Then
                    Return
                End If
                Dim oldKey As Long = Me._pId
                Me._pId = value
                Try 
                    Me.OnCollectionKeyChanged(oldKey)
                Catch __exception As System.ArgumentException
                    Me._pId = oldKey
                    Return
                End Try
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pId"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Date))>  _
        Public Property pDATA_SAIDA() As Date
            Get
                Return Me._pDATA_SAIDA
            End Get
            Set
                Me._pDATA_SAIDA = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pDATA_SAIDA"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Date))>  _
        Public Property pDATA_PREV_RETORNO() As Date
            Get
                Return Me._pDATA_PREV_RETORNO
            End Get
            Set
                Me._pDATA_PREV_RETORNO = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pDATA_PREV_RETORNO"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false, Type:=GetType(Date))>  _
        Public Property pDATA_RETORNO() As Date
            Get
                Return Me._pDATA_RETORNO
            End Get
            Set
                Me._pDATA_RETORNO = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pDATA_RETORNO"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false),  _
         System.ComponentModel.DataObjectFieldAttribute(true)>  _
        Public Property oAviacaoLocalLinhapId() As Long
            Get
                If ((Me._oAviacaoLocalLinhapId = -1)  _
                            AndAlso (Not (Me._oAviacaoLocalLinha) Is Nothing)) Then
                    Me._oAviacaoLocalLinhapId = Me._oAviacaoLocalLinha.pId
                End If
                Return Me._oAviacaoLocalLinhapId
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of Long).Default.Equals(value, Me.oAviacaoLocalLinhapId) = true) Then
                    Return
                End If
                Me._oAviacaoLocalLinha = Nothing
                Me._oAviacaoLocalLinhapId = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoLocalLinha"))
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoLocalLinhapId"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Property oAviacaoLocalLinha() As S5T.AviacaoLocalLinha
            Get
                If (Me._oAviacaoLocalLinha Is Nothing) Then
                    Me._oAviacaoLocalLinha = S5T.AviacaoLocalLinha.Load(Me._oAviacaoLocalLinhapId)
                End If
                Return Me._oAviacaoLocalLinha
            End Get
            Set
                Me._oAviacaoLocalLinhapId = -1
                Me._oAviacaoLocalLinha = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoLocalLinha"))
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoLocalLinhapId"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false),  _
         System.ComponentModel.DataObjectFieldAttribute(true)>  _
        Public Property oAviacaoMotoristapId() As Long
            Get
                If ((Me._oAviacaoMotoristapId = -1)  _
                            AndAlso (Not (Me._oAviacaoMotorista) Is Nothing)) Then
                    Me._oAviacaoMotoristapId = Me._oAviacaoMotorista.pId
                End If
                Return Me._oAviacaoMotoristapId
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of Long).Default.Equals(value, Me.oAviacaoMotoristapId) = true) Then
                    Return
                End If
                Me._oAviacaoMotorista = Nothing
                Me._oAviacaoMotoristapId = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoMotorista"))
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoMotoristapId"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Property oAviacaoMotorista() As S5T.AviacaoMotorista
            Get
                If (Me._oAviacaoMotorista Is Nothing) Then
                    Me._oAviacaoMotorista = S5T.AviacaoMotorista.Load(Me._oAviacaoMotoristapId)
                End If
                Return Me._oAviacaoMotorista
            End Get
            Set
                Me._oAviacaoMotoristapId = -1
                Me._oAviacaoMotorista = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoMotorista"))
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoMotoristapId"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false),  _
         System.ComponentModel.DataObjectFieldAttribute(true)>  _
        Public Property oAviacaoCaminhaopId() As Long
            Get
                If ((Me._oAviacaoCaminhaopId = -1)  _
                            AndAlso (Not (Me._oAviacaoCaminhao) Is Nothing)) Then
                    Me._oAviacaoCaminhaopId = Me._oAviacaoCaminhao.pId
                End If
                Return Me._oAviacaoCaminhaopId
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of Long).Default.Equals(value, Me.oAviacaoCaminhaopId) = true) Then
                    Return
                End If
                Me._oAviacaoCaminhao = Nothing
                Me._oAviacaoCaminhaopId = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoCaminhao"))
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoCaminhaopId"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Property oAviacaoCaminhao() As S5T.AviacaoCaminhao
            Get
                If (Me._oAviacaoCaminhao Is Nothing) Then
                    Me._oAviacaoCaminhao = S5T.AviacaoCaminhao.Load(Me._oAviacaoCaminhaopId)
                End If
                Return Me._oAviacaoCaminhao
            End Get
            Set
                Me._oAviacaoCaminhaopId = -1
                Me._oAviacaoCaminhao = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoCaminhao"))
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoCaminhaopId"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(Nothing, String)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Type:=GetType(String))>  _
        Public Property pRODIZIO() As String
            Get
                Return Me._pRODIZIO
            End Get
            Set
                Me._pRODIZIO = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pRODIZIO"))
            End Set
        End Property
        
        <System.ComponentModel.DefaultValueAttribute(CType(Nothing, String)),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, Type:=GetType(String))>  _
        Public Property pSTATUS() As String
            Get
                Return Me._pSTATUS
            End Get
            Set
                Me._pSTATUS = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("pSTATUS"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=false),  _
         System.ComponentModel.DataObjectFieldAttribute(true)>  _
        Public Property oAviacaoLocalLinhaRetornopId() As Long
            Get
                If ((Me._oAviacaoLocalLinhaRetornopId = -1)  _
                            AndAlso (Not (Me._oAviacaoLocalLinhaRetorno) Is Nothing)) Then
                    Me._oAviacaoLocalLinhaRetornopId = Me._oAviacaoLocalLinhaRetorno.pId
                End If
                Return Me._oAviacaoLocalLinhaRetornopId
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of Long).Default.Equals(value, Me.oAviacaoLocalLinhaRetornopId) = true) Then
                    Return
                End If
                Me._oAviacaoLocalLinhaRetorno = Nothing
                Me._oAviacaoLocalLinhaRetornopId = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoLocalLinhaRetorno"))
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoLocalLinhaRetornopId"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Property oAviacaoLocalLinhaRetorno() As S5T.AviacaoLocalLinha
            Get
                If (Me._oAviacaoLocalLinhaRetorno Is Nothing) Then
                    Me._oAviacaoLocalLinhaRetorno = S5T.AviacaoLocalLinha.Load(Me._oAviacaoLocalLinhaRetornopId)
                End If
                Return Me._oAviacaoLocalLinhaRetorno
            End Get
            Set
                Me._oAviacaoLocalLinhaRetornopId = -1
                Me._oAviacaoLocalLinhaRetorno = value
                Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoLocalLinhaRetorno"))
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("oAviacaoLocalLinhaRetornopId"))
            End Set
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property oAviacaoLocalLinhas() As S5T.AviacaoLocalLinhaCollection
            Get
                If (Me._oAviacaoLocalLinhas Is Nothing) Then
                    If ((Me.pId = -1)  _
                                OrElse (Me.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) = true)) Then
                        Me._oAviacaoLocalLinhas = New S5T.AviacaoLocalLinhaCollection(Me, Nothing)
                        Return Me._oAviacaoLocalLinhas
                    End If
                    Me._oAviacaoLocalLinhas = S5T.AviacaoLocalLinhaCollection.LoadoAviacaoLocalLinhasoAviacaoViagensMovsByAviacaoViagemMov(Me)
                End If
                Return Me._oAviacaoLocalLinhas
            End Get
        End Property
        
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public ReadOnly Property oAviacaoLocalLinhasRetorno() As S5T.AviacaoLocalLinhaCollection
            Get
                If (Me._oAviacaoLocalLinhasRetorno Is Nothing) Then
                    If ((Me.pId = -1)  _
                                OrElse (Me.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) = true)) Then
                        Me._oAviacaoLocalLinhasRetorno = New S5T.AviacaoLocalLinhaCollection(Nothing, Me)
                        Return Me._oAviacaoLocalLinhasRetorno
                    End If
                    Me._oAviacaoLocalLinhasRetorno = S5T.AviacaoLocalLinhaCollection.LoadoAviacaoLocalLinhasRetornooAviacaoViagemMovsRetornosByAviacaoViagemMov(Me)
                End If
                Return Me._oAviacaoLocalLinhasRetorno
            End Get
        End Property
        
        ReadOnly Property System_ComponentModel_IDataErrorInfo_Error() As String Implements System.ComponentModel.IDataErrorInfo.[Error]
            Get
                Return Me.Validate(System.Globalization.CultureInfo.CurrentCulture)
            End Get
        End Property
        
        ReadOnly Property System_ComponentModel_IDataErrorInfo_Item(ByVal columnName As String) As String Implements System.ComponentModel.IDataErrorInfo.Item
            Get
                Return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, Me, columnName, Nothing)
            End Get
        End Property
        
        ReadOnly Property CodeFluent_Runtime_Utilities_IKeyable_System_Int64__Key() As Long Implements CodeFluent.Runtime.Utilities.IKeyable(Of Long).Key
            Get
                Return Me.pId
            End Get
        End Property
        
        Public Overridable Property EntityState() As CodeFluent.Runtime.CodeFluentEntityState Implements CodeFluent.Runtime.ICodeFluentEntity.EntityState
            Get
                Return Me._entityState
            End Get
            Set
                If (System.Collections.Generic.EqualityComparer(Of CodeFluent.Runtime.CodeFluentEntityState).Default.Equals(value, Me.EntityState) = true) Then
                    Return
                End If
                If ((Me._entityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted)  _
                            AndAlso (value = CodeFluent.Runtime.CodeFluentEntityState.Modified)) Then
                    Return
                End If
                If ((Me._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created)  _
                            AndAlso (value = CodeFluent.Runtime.CodeFluentEntityState.Modified)) Then
                    Return
                End If
                Me._entityState = value
                Me.OnPropertyChanged(New System.ComponentModel.PropertyChangedEventArgs("EntityState"))
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Public Event EntityAction As CodeFluent.Runtime.CodeFluentEntityActionEventHandler Implements CodeFluent.Runtime.ICodeFluentEntity.EntityAction
        
        Public Event KeyChanged As System.EventHandler(Of CodeFluent.Runtime.Utilities.KeyChangedEventArgs(Of Long)) Implements CodeFluent.Runtime.Utilities.IKeyable(Of Long).KeyChanged
        
        Protected Overridable Sub OnPropertyChanged(ByVal e As System.ComponentModel.PropertyChangedEventArgs)
            If (Me.RaisePropertyChangedEvents = false) Then
                Return
            End If
            If (Not (Me.PropertyChangedEvent) Is Nothing) Then
                RaiseEvent PropertyChanged(Me, e)
            End If
        End Sub
        
        Protected Overridable Sub OnEntityAction(ByVal e As CodeFluent.Runtime.CodeFluentEntityActionEventArgs)
            If (Not (Me.EntityActionEvent) Is Nothing) Then
                RaiseEvent EntityAction(Me, e)
            End If
        End Sub
        
        Public Overloads Overridable Function Equals(ByVal aviacaoViagemMov As S5T.AviacaoViagemMov) As Boolean Implements System.IEquatable(Of S5T.AviacaoViagemMov).Equals
            If (aviacaoViagemMov Is Nothing) Then
                Return false
            End If
            If (Me.pId = -1) Then
                Return MyBase.Equals(aviacaoViagemMov)
            End If
            Return (Me.pId.Equals(aviacaoViagemMov.pId) = true)
        End Function
        
        Public Overloads Overrides Function GetHashCode() As Integer
            Return Me.pId.GetHashCode
        End Function
        
        Public Overloads Overrides Function Equals(ByVal obj As Object) As Boolean
            Dim aviacaoViagemMov As S5T.AviacaoViagemMov = Nothing
            Try 
                aviacaoViagemMov = CType(obj,S5T.AviacaoViagemMov)
            Catch icex As System.InvalidCastException
                aviacaoViagemMov = Nothing
            End Try
            Return Me.Equals(aviacaoViagemMov)
        End Function
        
        Friend Sub SaveoAviacaoLocalLinhasRelations()
            If (Me._oAviacaoLocalLinhas Is Nothing) Then
                Return
            End If
            Dim enumerator As System.Collections.IEnumerator = CType(Me._oAviacaoLocalLinhas,CodeFluent.Runtime.ICodeFluentSet).Relations.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                Dim entry As System.Collections.DictionaryEntry = CType(enumerator.Current,System.Collections.DictionaryEntry)
                Dim aviacaoLocalLinha As S5T.AviacaoLocalLinha = CType(entry.Key,S5T.AviacaoLocalLinha)
                Dim relationType As CodeFluent.Runtime.CodeFluentRelationType = CType(entry.Value,CodeFluent.Runtime.CodeFluentRelationType)
                If ((relationType = CodeFluent.Runtime.CodeFluentRelationType.Added)  _
                            AndAlso ((aviacaoLocalLinha.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked)  _
                            = false)) Then
                    Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
                    persistence.CreateStoredProcedureCommand(Nothing, "AviacaoViagemMov", "SaveAviacaoLocalLinhaoAviacaoViagensMovs")
                    persistence.AddParameter("@pId", aviacaoLocalLinha.pId, CType(-1,Long))
                    persistence.AddParameter("@pId2", Me.pId, CType(-1,Long))
                    persistence.ExecuteNonQuery
                Else
                    Dim persistence1 As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
                    persistence1.CreateStoredProcedureCommand(Nothing, "AviacaoViagemMov", "DeleteAviacaoLocalLinhaoAviacaoViagensMovs")
                    persistence1.AddParameter("@pId", aviacaoLocalLinha.pId, CType(-1,Long))
                    persistence1.AddParameter("@pId2", Me.pId, CType(-1,Long))
                    persistence1.ExecuteNonQuery
                End If
                If (aviacaoLocalLinha.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked) Then
                    aviacaoLocalLinha.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                End If
                b = enumerator.MoveNext
            Loop
            CType(Me._oAviacaoLocalLinhas,CodeFluent.Runtime.ICodeFluentSet).Relations.Clear
        End Sub
        
        Friend Sub SaveoAviacaoLocalLinhasRetornoRelations()
            If (Me._oAviacaoLocalLinhasRetorno Is Nothing) Then
                Return
            End If
            Dim enumerator As System.Collections.IEnumerator = CType(Me._oAviacaoLocalLinhasRetorno,CodeFluent.Runtime.ICodeFluentSet).Relations.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                Dim entry As System.Collections.DictionaryEntry = CType(enumerator.Current,System.Collections.DictionaryEntry)
                Dim aviacaoLocalLinha As S5T.AviacaoLocalLinha = CType(entry.Key,S5T.AviacaoLocalLinha)
                Dim relationType As CodeFluent.Runtime.CodeFluentRelationType = CType(entry.Value,CodeFluent.Runtime.CodeFluentRelationType)
                If ((relationType = CodeFluent.Runtime.CodeFluentRelationType.Added)  _
                            AndAlso ((aviacaoLocalLinha.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked)  _
                            = false)) Then
                    Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
                    persistence.CreateStoredProcedureCommand(Nothing, "AviacaoViagemMov", "SaveAviacaoLocalLinhaoAviacaoViagemMovsRetornos")
                    persistence.AddParameter("@pId", aviacaoLocalLinha.pId, CType(-1,Long))
                    persistence.AddParameter("@pId2", Me.pId, CType(-1,Long))
                    persistence.ExecuteNonQuery
                Else
                    Dim persistence1 As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
                    persistence1.CreateStoredProcedureCommand(Nothing, "AviacaoViagemMov", "DeleteAviacaoLocalLinhaoAviacaoViagemMovsRetornos")
                    persistence1.AddParameter("@pId", aviacaoLocalLinha.pId, CType(-1,Long))
                    persistence1.AddParameter("@pId2", Me.pId, CType(-1,Long))
                    persistence1.ExecuteNonQuery
                End If
                If (aviacaoLocalLinha.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeUnlinked) Then
                    aviacaoLocalLinha.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                End If
                b = enumerator.MoveNext
            Loop
            CType(Me._oAviacaoLocalLinhasRetorno,CodeFluent.Runtime.ICodeFluentSet).Relations.Clear
        End Sub
        
        Overridable Function System_IComparable_CompareTo(ByVal value As Object) As Integer Implements System.IComparable.CompareTo
            Dim aviacaoViagemMov As S5T.AviacaoViagemMov = Nothing
            Try 
                aviacaoViagemMov = CType(value,S5T.AviacaoViagemMov)
            Catch icex As System.InvalidCastException
                aviacaoViagemMov = Nothing
            End Try
            If (aviacaoViagemMov Is Nothing) Then
                Throw New System.ArgumentException("value")
            End If
            Dim localCompareTo As Integer = Me.CompareTo(aviacaoViagemMov)
            Return localCompareTo
        End Function
        
        Public Overridable Function CompareTo(ByVal aviacaoViagemMov As S5T.AviacaoViagemMov) As Integer Implements System.IComparable(Of S5T.AviacaoViagemMov).CompareTo
            If (aviacaoViagemMov Is Nothing) Then
                Throw New System.ArgumentNullException("aviacaoViagemMov")
            End If
            Dim localCompareTo As Integer = Me.pId.CompareTo(aviacaoViagemMov.pId)
            Return localCompareTo
        End Function
        
        Public Overloads Overridable Function Validate(ByVal culture As System.Globalization.CultureInfo) As String
            Return CodeFluentPersistence.Validate(culture, Me, Nothing)
        End Function
        
        Public Overloads Overridable Sub Validate(ByVal culture As System.Globalization.CultureInfo, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException)) Implements CodeFluent.Runtime.ICodeFluentSummaryValidator.Validate
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results)
            evt.Culture = culture
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Dim externalValidate As String
                If (Not (evt.Argument) Is Nothing) Then
                    externalValidate = evt.Argument.ToString
                Else
                    externalValidate = S5T.Resources.Manager.GetStringWithDefault(culture, "S5T.AviacaoViagemMov.ExternalValidate", "Type 'S5T.AviacaoViagemMov' cannot be validated.", Nothing)
                End If
                CodeFluentPersistence.AddValidationError(results, externalValidate)
            End If
            CodeFluentPersistence.ValidateMember(culture, results, Me, Nothing)
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results))
        End Sub
        
        Public Overloads Sub Validate()
            Dim var As String = Me.Validate(System.Globalization.CultureInfo.CurrentCulture)
            If (Not (var) Is Nothing) Then
                Throw New CodeFluent.Runtime.CodeFluentValidationException(var)
            End If
        End Sub
        
        Function CodeFluent_Runtime_ICodeFluentValidator_Validate(ByVal culture As System.Globalization.CultureInfo) As String Implements CodeFluent.Runtime.ICodeFluentValidator.Validate
            Dim localValidate As String = Me.Validate(culture)
            Return localValidate
        End Function
        
        Sub CodeFluent_Runtime_ICodeFluentMemberValidator_Validate(ByVal culture As System.Globalization.CultureInfo, ByVal memberName As String, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException)) Implements CodeFluent.Runtime.ICodeFluentMemberValidator.Validate
            Me.ValidateMember(culture, memberName, results)
        End Sub
        
        Public Overloads Overridable Function Delete() As Boolean Implements CodeFluent.Runtime.ICodeFluentEntity.Delete
            Dim ret As Boolean = false
            Me.OnBeforeDelete
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true)
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Return ret
            End If
            If (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted) Then
                Return ret
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "AviacaoViagemMov", "Delete")
            persistence.AddParameter("@pId", Me.pId, CType(-1,Long))
            persistence.ExecuteNonQuery
            Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false))
            ret = true
            Return ret
        End Function
        
        Protected Overridable Sub ReadRecord(ByVal reader As System.Data.IDataReader, ByVal options As CodeFluent.Runtime.CodeFluentReloadOptions)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            If (((options And CodeFluent.Runtime.CodeFluentReloadOptions.Properties)  _
                        = 0)  _
                        = false) Then
                Me._pId = CodeFluentPersistence.GetReaderValue(reader, "pId", CType(-1,Long))
                Me._pDATA_SAIDA = CodeFluentPersistence.GetReaderValue(reader, "pDATA_SAIDA", CType(CodeFluentPersistence.DefaultDateTimeValue,Date))
                Me._pDATA_PREV_RETORNO = CodeFluentPersistence.GetReaderValue(reader, "pDATA_PREV_RETORNO", CType(CodeFluentPersistence.DefaultDateTimeValue,Date))
                Me._pDATA_RETORNO = CodeFluentPersistence.GetReaderValue(reader, "pDATA_RETORNO", CType(CodeFluentPersistence.DefaultDateTimeValue,Date))
                Me.oAviacaoLocalLinhapId = CodeFluentPersistence.GetReaderValue(reader, "oAviacaoLocalLinha_pId", CType(-1,Long))
                Me.oAviacaoMotoristapId = CodeFluentPersistence.GetReaderValue(reader, "oAviacaoMotorista_pId", CType(-1,Long))
                Me.oAviacaoCaminhaopId = CodeFluentPersistence.GetReaderValue(reader, "oAviacaoCaminhao_pId", CType(-1,Long))
                Me._pRODIZIO = CodeFluentPersistence.GetReaderValue(reader, "pRODIZIO", CType(CType(Nothing, String),String))
                Me._pSTATUS = CodeFluentPersistence.GetReaderValue(reader, "pSTATUS", CType(CType(Nothing, String),String))
                Me.oAviacaoLocalLinhaRetornopId = CodeFluentPersistence.GetReaderValue(reader, "oAviacaoLocalLinhaRetorno_pId", CType(-1,Long))
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false))
        End Sub
        
        Sub CodeFluent_Runtime_ICodeFluentEntity_ReadRecord(ByVal reader As System.Data.IDataReader) Implements CodeFluent.Runtime.ICodeFluentEntity.ReadRecord
            Me.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
        End Sub
        
        Protected Overridable Sub ReadRecordOnSave(ByVal reader As System.Data.IDataReader)
            If (reader Is Nothing) Then
                Throw New System.ArgumentNullException("reader")
            End If
            Me._pId = CodeFluentPersistence.GetReaderValue(reader, "pId", CType(-1,Long))
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false))
        End Sub
        
        Sub CodeFluent_Runtime_ICodeFluentEntity_ReadRecordOnSave(ByVal reader As System.Data.IDataReader) Implements CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave
            Me.ReadRecordOnSave(reader)
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Shared Function Load(ByVal pId As Long) As S5T.AviacaoViagemMov
            If (pId = -1) Then
                Return Nothing
            End If
            Dim aviacaoViagemMov As S5T.AviacaoViagemMov = New S5T.AviacaoViagemMov()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "AviacaoViagemMov", "Load")
            persistence.AddParameter("@pId", pId, CType(-1,Long))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    aviacaoViagemMov.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    aviacaoViagemMov.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return aviacaoViagemMov
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Shared Function LoadBypId(ByVal pId As Long) As S5T.AviacaoViagemMov
            If (pId = -1) Then
                Return Nothing
            End If
            Dim aviacaoViagemMov As S5T.AviacaoViagemMov = New S5T.AviacaoViagemMov()
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "AviacaoViagemMov", "LoadBypId")
            persistence.AddParameter("@pId", pId, CType(-1,Long))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    aviacaoViagemMov.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.[Default])
                    aviacaoViagemMov.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    Return aviacaoViagemMov
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return Nothing
        End Function
        
        Public Shared Function LoadByParametros(ByVal parDataSaidaIni As String, ByVal parDataSaidaFim As String, ByVal parDataPrevIni As String, ByVal parDataPrevFim As String, ByVal parDataRetIni As String, ByVal parDataRetFim As String, ByVal parCaminhaoId As Integer, ByVal parMotoristaId As Integer, ByVal parLocalLinhaId As String, ByVal parFlgCaminhaoEmViagem As String, ByVal parOrderBy As String) As System.Collections.Generic.List(Of S5T.AviacaoViagemMovViewGrid)
            Dim ret As System.Collections.Generic.List(Of S5T.AviacaoViagemMovViewGrid) = CType(Nothing, System.Collections.Generic.List(Of S5T.AviacaoViagemMovViewGrid))
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "AviacaoViagemMov", "LoadByParametros")
            persistence.AddParameter("@parDataSaidaIni", parDataSaidaIni)
            persistence.AddParameter("@parDataSaidaFim", parDataSaidaFim)
            persistence.AddParameter("@parDataPrevIni", parDataPrevIni)
            persistence.AddParameter("@parDataPrevFim", parDataPrevFim)
            persistence.AddParameter("@parDataRetIni", parDataRetIni)
            persistence.AddParameter("@parDataRetFim", parDataRetFim)
            persistence.AddParameter("@parCaminhaoId", parCaminhaoId)
            persistence.AddParameter("@parMotoristaId", parMotoristaId)
            persistence.AddParameter("@parLocalLinhaId", parLocalLinhaId)
            persistence.AddParameter("@parFlgCaminhaoEmViagem", parFlgCaminhaoEmViagem)
            persistence.AddParameter("@parOrderBy", parOrderBy)
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    ret = New System.Collections.Generic.List(Of S5T.AviacaoViagemMovViewGrid)()
                    CodeFluent.Runtime.CodeFluentLightWeightPersistence.ReadList(reader, ret, GetType(S5T.AviacaoViagemMovViewGrid))
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return ret
        End Function
        
        Public Overridable Function Reload(ByVal options As CodeFluent.Runtime.CodeFluentReloadOptions) As Boolean
            Dim ret As Boolean = false
            If (Me.pId = -1) Then
                Return ret
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "AviacaoViagemMov", "Load")
            persistence.AddParameter("@pId", Me.pId, CType(-1,Long))
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    Me.ReadRecord(reader, options)
                    Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
                    ret = true
                Else
                    Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted
                End If
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Return ret
        End Function
        
        Protected Overridable Function BaseSave(ByVal force As Boolean) As Boolean
            If (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) Then
                S5T.AviacaoViagemMov.Delete(Me)
                Return false
            End If
            Dim evt As CodeFluent.Runtime.CodeFluentEntityActionEventArgs = New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true)
            Me.OnEntityAction(evt)
            If (evt.Cancel = true) Then
                Return false
            End If
            CodeFluentPersistence.ThrowIfDeleted(Me)
            Me.Validate
            If ((force = false)  _
                        AndAlso (Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged)) Then
                Return false
            End If
            Dim persistence As CodeFluent.Runtime.CodeFluentPersistence = CodeFluentContext.Get(S5T.Constants.S5TStoreName).Persistence
            persistence.CreateStoredProcedureCommand(Nothing, "AviacaoViagemMov", "Save")
            persistence.AddParameter("@pId", Me.pId, CType(-1,Long))
            persistence.AddParameter("@pDATA_SAIDA", Me.pDATA_SAIDA, CodeFluentPersistence.DefaultDateTimeValue)
            persistence.AddParameter("@pDATA_PREV_RETORNO", Me.pDATA_PREV_RETORNO, CodeFluentPersistence.DefaultDateTimeValue)
            persistence.AddParameter("@pDATA_RETORNO", Me.pDATA_RETORNO, CodeFluentPersistence.DefaultDateTimeValue)
            persistence.AddParameter("@oAviacaoLocalLinha_pId", Me.oAviacaoLocalLinhapId, CType(-1,Long))
            persistence.AddParameter("@oAviacaoMotorista_pId", Me.oAviacaoMotoristapId, CType(-1,Long))
            persistence.AddParameter("@oAviacaoCaminhao_pId", Me.oAviacaoCaminhaopId, CType(-1,Long))
            persistence.AddParameter("@pRODIZIO", Me.pRODIZIO, CType(Nothing, String))
            persistence.AddParameter("@pSTATUS", Me.pSTATUS, CType(Nothing, String))
            persistence.AddParameter("@oAviacaoLocalLinhaRetorno_pId", Me.oAviacaoLocalLinhaRetornopId, CType(-1,Long))
            persistence.AddParameter("@_trackLastWriteUser", persistence.Context.User.Name)
            Dim reader As System.Data.IDataReader = Nothing
            Try 
                reader = persistence.ExecuteReader
                If (reader.Read = true) Then
                    Me.ReadRecordOnSave(reader)
                End If
                CodeFluentPersistence.NextResults(reader)
            Finally
                If (Not (reader) Is Nothing) Then
                    reader.Dispose
                End If
                persistence.CompleteCommand
            End Try
            Me.SaveoAviacaoLocalLinhasRelations
            Me.SaveoAviacaoLocalLinhasRetornoRelations
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false))
            Me.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged
            Return true
        End Function
        
        Public Overloads Overridable Function Save() As Boolean Implements CodeFluent.Runtime.ICodeFluentEntity.Save
            Me.OnBeforeSave
            Dim localSave As Boolean = Me.BaseSave(false)
            Me.OnAfterSave
            Return localSave
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Shared Function Save(ByVal aviacaoViagemMov As S5T.AviacaoViagemMov) As Boolean
            If (aviacaoViagemMov Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = aviacaoViagemMov.Save
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Shared Function Insert(ByVal aviacaoViagemMov As S5T.AviacaoViagemMov) As Boolean
            Dim ret As Boolean = S5T.AviacaoViagemMov.Save(aviacaoViagemMov)
            Return ret
        End Function
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Shared Function Delete(ByVal aviacaoViagemMov As S5T.AviacaoViagemMov) As Boolean
            If (aviacaoViagemMov Is Nothing) Then
                Return false
            End If
            Dim ret As Boolean = aviacaoViagemMov.Delete
            Return ret
        End Function
        
        Public Function Trace() As String
            Dim stringBuilder As System.Text.StringBuilder = New System.Text.StringBuilder()
            Dim stringWriter As System.IO.StringWriter = New System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture)
            Dim writer As System.CodeDom.Compiler.IndentedTextWriter = New System.CodeDom.Compiler.IndentedTextWriter(stringWriter)
            Me.BaseTrace(writer)
            writer.Flush
            CType(writer,System.IDisposable).Dispose
            CType(stringWriter,System.IDisposable).Dispose
            Dim sr As String = stringBuilder.ToString
            Return sr
        End Function
        
        <System.ComponentModel.BrowsableAttribute(false),  _
         System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)>  _
        Sub CodeFluent_Runtime_ICodeFluentObject_Trace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter) Implements CodeFluent.Runtime.ICodeFluentObject.Trace
            Me.BaseTrace(writer)
        End Sub
        
        Protected Overridable Sub BaseTrace(ByVal writer As System.CodeDom.Compiler.IndentedTextWriter)
            writer.Write("[")
            writer.Write("pId=")
            writer.Write(Me.pId)
            writer.Write(",")
            writer.Write("pDATA_SAIDA=")
            writer.Write(Me.pDATA_SAIDA)
            writer.Write(",")
            writer.Write("pDATA_PREV_RETORNO=")
            writer.Write(Me.pDATA_PREV_RETORNO)
            writer.Write(",")
            writer.Write("pDATA_RETORNO=")
            writer.Write(Me.pDATA_RETORNO)
            writer.Write(",")
            writer.Write("oAviacaoLocalLinha=")
            If (Not (Me._oAviacaoLocalLinha) Is Nothing) Then
                CType(Me._oAviacaoLocalLinha,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("_oAviacaoLocalLinhapId=")
            writer.Write(Me._oAviacaoLocalLinhapId)
            writer.Write(",")
            writer.Write("oAviacaoMotorista=")
            If (Not (Me._oAviacaoMotorista) Is Nothing) Then
                CType(Me._oAviacaoMotorista,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("_oAviacaoMotoristapId=")
            writer.Write(Me._oAviacaoMotoristapId)
            writer.Write(",")
            writer.Write("oAviacaoCaminhao=")
            If (Not (Me._oAviacaoCaminhao) Is Nothing) Then
                CType(Me._oAviacaoCaminhao,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("_oAviacaoCaminhaopId=")
            writer.Write(Me._oAviacaoCaminhaopId)
            writer.Write(",")
            writer.Write("pRODIZIO=")
            writer.Write(Me.pRODIZIO)
            writer.Write(",")
            writer.Write("pSTATUS=")
            writer.Write(Me.pSTATUS)
            writer.Write(",")
            writer.Write("oAviacaoLocalLinhaRetorno=")
            If (Not (Me._oAviacaoLocalLinhaRetorno) Is Nothing) Then
                CType(Me._oAviacaoLocalLinhaRetorno,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("_oAviacaoLocalLinhaRetornopId=")
            writer.Write(Me._oAviacaoLocalLinhaRetornopId)
            writer.Write(",")
            writer.Write("oAviacaoLocalLinhas=")
            If (Not (Me._oAviacaoLocalLinhas) Is Nothing) Then
                CType(Me._oAviacaoLocalLinhas,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(",")
            writer.Write("oAviacaoLocalLinhasRetorno=")
            If (Not (Me._oAviacaoLocalLinhasRetorno) Is Nothing) Then
                CType(Me._oAviacaoLocalLinhasRetorno,CodeFluent.Runtime.ICodeFluentObject).Trace(writer)
            Else
                writer.Write("<null>")
            End If
            writer.Write(", EntityState=")
            writer.Write(Me.EntityState)
            writer.Write("]")
        End Sub
        
        Public Overloads Overridable Sub SetoAviacaoLocalLinhas(ByVal values As System.Collections.IDictionary)
            If (values Is Nothing) Then
                Throw New System.ArgumentNullException("values")
            End If
            Me.oAviacaoLocalLinhas.Clear
            Dim enumerator As System.Collections.IEnumerator = values.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                Dim entry As System.Collections.DictionaryEntry = CType(enumerator.Current,System.Collections.DictionaryEntry)
                If (Not (entry.Key) Is Nothing) Then
                    Me.oAviacaoLocalLinhas.AddByEntityKey(entry.Key.ToString)
                End If
                b = enumerator.MoveNext
            Loop
        End Sub
        
        Public Overloads Overridable Sub SetoAviacaoLocalLinhas(ByVal values As Object)
            If (values Is Nothing) Then
                Return
            End If
            Dim dictionary As System.Collections.IDictionary = Nothing
            Try 
                dictionary = CType(values,System.Collections.IDictionary)
            Catch icex As System.InvalidCastException
                dictionary = Nothing
            End Try
            If (Not (dictionary) Is Nothing) Then
                Me.SetoAviacaoLocalLinhas(dictionary)
                Return
            End If
            Dim oAviacaoLocalLinhas As S5T.AviacaoLocalLinhaCollection = Nothing
            Try 
                oAviacaoLocalLinhas = CType(values,S5T.AviacaoLocalLinhaCollection)
            Catch icex1 As System.InvalidCastException
                oAviacaoLocalLinhas = Nothing
            End Try
            If (Not (oAviacaoLocalLinhas) Is Nothing) Then
                Me._oAviacaoLocalLinhas = oAviacaoLocalLinhas
                Return
            End If
        End Sub
        
        Public Overloads Overridable Sub SetoAviacaoLocalLinhasRetorno(ByVal values As System.Collections.IDictionary)
            If (values Is Nothing) Then
                Throw New System.ArgumentNullException("values")
            End If
            Me.oAviacaoLocalLinhasRetorno.Clear
            Dim enumerator As System.Collections.IEnumerator = values.GetEnumerator
            Dim b As Boolean
            b = enumerator.MoveNext
            Do While b
                Dim entry As System.Collections.DictionaryEntry = CType(enumerator.Current,System.Collections.DictionaryEntry)
                If (Not (entry.Key) Is Nothing) Then
                    Me.oAviacaoLocalLinhasRetorno.AddByEntityKey(entry.Key.ToString)
                End If
                b = enumerator.MoveNext
            Loop
        End Sub
        
        Public Overloads Overridable Sub SetoAviacaoLocalLinhasRetorno(ByVal values As Object)
            If (values Is Nothing) Then
                Return
            End If
            Dim dictionary As System.Collections.IDictionary = Nothing
            Try 
                dictionary = CType(values,System.Collections.IDictionary)
            Catch icex As System.InvalidCastException
                dictionary = Nothing
            End Try
            If (Not (dictionary) Is Nothing) Then
                Me.SetoAviacaoLocalLinhasRetorno(dictionary)
                Return
            End If
            Dim oAviacaoLocalLinhasRetorno As S5T.AviacaoLocalLinhaCollection = Nothing
            Try 
                oAviacaoLocalLinhasRetorno = CType(values,S5T.AviacaoLocalLinhaCollection)
            Catch icex1 As System.InvalidCastException
                oAviacaoLocalLinhasRetorno = Nothing
            End Try
            If (Not (oAviacaoLocalLinhasRetorno) Is Nothing) Then
                Me._oAviacaoLocalLinhasRetorno = oAviacaoLocalLinhasRetorno
                Return
            End If
        End Sub
        
        <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Shared Function LoadByEntityKey(ByVal key As String) As S5T.AviacaoViagemMov
            If (key Is String.Empty) Then
                Return Nothing
            End If
            Dim aviacaoViagemMov As S5T.AviacaoViagemMov
            Dim var As Long = CType(ConvertUtilities.ChangeType(key, GetType(Long), -1),Long)
            aviacaoViagemMov = S5T.AviacaoViagemMov.Load(var)
            Return aviacaoViagemMov
        End Function
        
        Protected Overridable Sub ValidateMember(ByVal culture As System.Globalization.CultureInfo, ByVal memberName As String, ByVal results As System.Collections.Generic.IList(Of CodeFluent.Runtime.CodeFluentValidationException))
        End Sub
        
        Public Overloads Function Clone(ByVal deep As Boolean) As S5T.AviacaoViagemMov
            Dim aviacaoViagemMov As S5T.AviacaoViagemMov = New S5T.AviacaoViagemMov()
            Me.CopyTo(aviacaoViagemMov, deep)
            Return aviacaoViagemMov
        End Function
        
        Public Overloads Function Clone() As S5T.AviacaoViagemMov
            Dim localClone As S5T.AviacaoViagemMov = Me.Clone(true)
            Return localClone
        End Function
        
        Function System_ICloneable_Clone() As Object Implements System.ICloneable.Clone
            Dim localClone As Object = Me.Clone
            Return localClone
        End Function
        
        Public Overridable Sub CopyFrom(ByVal dict As System.Collections.IDictionary, ByVal deep As Boolean)
            If (dict Is Nothing) Then
                Throw New System.ArgumentNullException("dict")
            End If
            If (dict.Contains("pId") = true) Then
                Me.pId = CType(ConvertUtilities.ChangeType(dict("pId"), GetType(Long), -1),Long)
            End If
            If (dict.Contains("pSTATUS") = true) Then
                Me.pSTATUS = CType(ConvertUtilities.ChangeType(dict("pSTATUS"), GetType(String), CType(Nothing, String)),String)
            End If
            If (dict.Contains("pRODIZIO") = true) Then
                Me.pRODIZIO = CType(ConvertUtilities.ChangeType(dict("pRODIZIO"), GetType(String), CType(Nothing, String)),String)
            End If
            If (dict.Contains("pDATA_RETORNO") = true) Then
                Me.pDATA_RETORNO = CType(ConvertUtilities.ChangeType(dict("pDATA_RETORNO"), GetType(Date), CodeFluentPersistence.DefaultDateTimeValue),Date)
            End If
            If (dict.Contains("pDATA_SAIDA") = true) Then
                Me.pDATA_SAIDA = CType(ConvertUtilities.ChangeType(dict("pDATA_SAIDA"), GetType(Date), CodeFluentPersistence.DefaultDateTimeValue),Date)
            End If
            If (dict.Contains("pDATA_PREV_RETORNO") = true) Then
                Me.pDATA_PREV_RETORNO = CType(ConvertUtilities.ChangeType(dict("pDATA_PREV_RETORNO"), GetType(Date), CodeFluentPersistence.DefaultDateTimeValue),Date)
            End If
            If (dict.Contains("oAviacaoLocalLinhaRetornopId") = true) Then
                Me.oAviacaoLocalLinhaRetornopId = CType(ConvertUtilities.ChangeType(dict("oAviacaoLocalLinhaRetornopId"), GetType(Long), -1),Long)
            End If
            If (dict.Contains("oAviacaoLocalLinhapId") = true) Then
                Me.oAviacaoLocalLinhapId = CType(ConvertUtilities.ChangeType(dict("oAviacaoLocalLinhapId"), GetType(Long), -1),Long)
            End If
            If (dict.Contains("oAviacaoMotoristapId") = true) Then
                Me.oAviacaoMotoristapId = CType(ConvertUtilities.ChangeType(dict("oAviacaoMotoristapId"), GetType(Long), -1),Long)
            End If
            If (dict.Contains("oAviacaoCaminhaopId") = true) Then
                Me.oAviacaoCaminhaopId = CType(ConvertUtilities.ChangeType(dict("oAviacaoCaminhaopId"), GetType(Long), -1),Long)
            End If
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict))
        End Sub
        
        Public Overloads Overridable Sub CopyTo(ByVal aviacaoViagemMov As S5T.AviacaoViagemMov, ByVal deep As Boolean)
            If (aviacaoViagemMov Is Nothing) Then
                Throw New System.ArgumentNullException("aviacaoViagemMov")
            End If
            aviacaoViagemMov.pId = Me.pId
            aviacaoViagemMov.pSTATUS = Me.pSTATUS
            aviacaoViagemMov.pRODIZIO = Me.pRODIZIO
            aviacaoViagemMov.pDATA_RETORNO = Me.pDATA_RETORNO
            aviacaoViagemMov.pDATA_SAIDA = Me.pDATA_SAIDA
            aviacaoViagemMov.pDATA_PREV_RETORNO = Me.pDATA_PREV_RETORNO
            aviacaoViagemMov.oAviacaoLocalLinhaRetornopId = Me.oAviacaoLocalLinhaRetornopId
            aviacaoViagemMov.oAviacaoLocalLinhapId = Me.oAviacaoLocalLinhapId
            aviacaoViagemMov.oAviacaoMotoristapId = Me.oAviacaoMotoristapId
            aviacaoViagemMov.oAviacaoCaminhaopId = Me.oAviacaoCaminhaopId
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, aviacaoViagemMov))
        End Sub
        
        Public Overloads Overridable Sub CopyTo(ByVal dict As System.Collections.IDictionary, ByVal deep As Boolean)
            If (dict Is Nothing) Then
                Throw New System.ArgumentNullException("dict")
            End If
            dict("pId") = Me.pId
            dict("pSTATUS") = Me.pSTATUS
            dict("pRODIZIO") = Me.pRODIZIO
            dict("pDATA_RETORNO") = Me.pDATA_RETORNO
            dict("pDATA_SAIDA") = Me.pDATA_SAIDA
            dict("pDATA_PREV_RETORNO") = Me.pDATA_PREV_RETORNO
            dict("oAviacaoLocalLinhaRetornopId") = Me.oAviacaoLocalLinhaRetornopId
            dict("oAviacaoLocalLinhapId") = Me.oAviacaoLocalLinhapId
            dict("oAviacaoMotoristapId") = Me.oAviacaoMotoristapId
            dict("oAviacaoCaminhaopId") = Me.oAviacaoCaminhaopId
            Me.OnEntityAction(New CodeFluent.Runtime.CodeFluentEntityActionEventArgs(Me, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict))
        End Sub
        
        Protected Sub OnCollectionKeyChanged(ByVal key As Long)
            If (Not (Me.KeyChangedEvent) Is Nothing) Then
                RaiseEvent KeyChanged(Me, New CodeFluent.Runtime.Utilities.KeyChangedEventArgs(Of Long)(key))
            End If
        End Sub
    End Class
End Namespace
